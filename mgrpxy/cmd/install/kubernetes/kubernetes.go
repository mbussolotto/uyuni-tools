// SPDX-FileCopyrightText: 2023 SUSE LLC
//
// SPDX-License-Identifier: Apache-2.0

package kubernetes

import (
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/uyuni-project/uyuni-tools/mgrpxy/shared/kubernetes"
	pxy_utils "github.com/uyuni-project/uyuni-tools/mgrpxy/shared/utils"
	"github.com/uyuni-project/uyuni-tools/shared/types"
	"github.com/uyuni-project/uyuni-tools/shared/utils"
)

type kubernetesProxyInstallFlags struct {
	pxy_utils.ProxyInstallFlags `mapstructure:",squash"`
	Helm                        kubernetes.HelmFlags
}

func NewCommand(globalFlags *types.GlobalFlags) *cobra.Command {

	cmd := &cobra.Command{
		Use:   "kubernetes [path/to/config.tar.gz]",
		Short: "install a new proxy on a running kubernetes cluster",
		Long: `Install a new proxy on a running kubernetes cluster.

It only takes the path to the configuration tarball generated by the server
as parameter.

The install kubernetes command assumes kubectl is installed locally.

NOTE: for now installing on a remote kubernetes cluster is not supported!
`,
		Args: cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			viper := utils.ReadConfig(globalFlags.ConfigPath, "admconfig", cmd)
			var flags kubernetesProxyInstallFlags
			if err := viper.Unmarshal(&flags); err != nil {
				log.Fatal().Err(err).Msgf("Failed to unmarshall configuration")
			}
			installForKubernetes(globalFlags, &flags, cmd, args)
		},
	}

	pxy_utils.AddInstallFlags(cmd)

	kubernetes.AddHelmFlags(cmd)

	return cmd
}

// SPDX-FileCopyrightText: 2023 SUSE LLC
//
// SPDX-License-Identifier: Apache-2.0

package podman

import (
	"github.com/rs/zerolog/log"
	"github.com/spf13/cobra"
	"github.com/uyuni-project/uyuni-tools/mgrpxy/shared/utils"
	"github.com/uyuni-project/uyuni-tools/shared/podman"
	"github.com/uyuni-project/uyuni-tools/shared/types"
	shared_utils "github.com/uyuni-project/uyuni-tools/shared/utils"
)

type podmanProxyInstallFlags struct {
	utils.ProxyInstallFlags `mapstructure:",squash"`
	Podman                  podman.PodmanFlags
}

func NewCommand(globalFlags *types.GlobalFlags) *cobra.Command {

	podmanCmd := &cobra.Command{
		Use:   "podman [path/to/config.tar.gz]",
		Short: "install a new proxy on podman from scratch",
		Long: `Install a new proxy on podman from scratch

It only takes the path to the configuration tarball generated by the server
as parameter.

The install podman command assumes podman is installed locally.

NOTE: for now installing on a remote podman is not supported!
`,
		Args: cobra.ExactArgs(1),
		Run: func(cmd *cobra.Command, args []string) {
			viper := shared_utils.ReadConfig(globalFlags.ConfigPath, "admconfig", cmd)
			var flags podmanProxyInstallFlags
			if err := viper.Unmarshal(&flags); err != nil {
				log.Fatal().Err(err).Msgf("Failed to unmarshall configuration")
			}
			installForPodman(globalFlags, &flags, cmd, args)
		},
	}

	utils.AddInstallFlags(podmanCmd)
	podman.AddPodmanInstallFlag(podmanCmd)

	return podmanCmd
}
